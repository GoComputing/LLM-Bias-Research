from recommender import base_prompt_template
from searchengine import AmazonSearchEngine
from tqdm.auto import tqdm
import argparse
import random
import json
import os

"""
Prompt template
Seed
Search engine metadata
Queries path
Top-k
Queries
 Query
 Products
 Attack position
"""

def main(args):

    queries_path = args.queries_path
    search_engine_path = args.search_engine_path
    output_path = args.output_path
    top_k = args.top_k
    seed = args.seed

    random.seed(seed)

    if os.path.exists(output_path):
        raise IOError(f'Output directory already exists ({output_path})')

    # Load queries
    with open(queries_path, 'r') as f:
        queries = json.load(f)

    # Load search engine
    print("Loading index...")
    search_engine = AmazonSearchEngine()
    search_engine.load_search_engine(search_engine_path)

    # Dataset metadata
    dataset = {
        'prompt_template': base_prompt_template(),
        'seed': seed,
        'search_engine_metadata': search_engine.metadata,
        'queries_path': queries_path,
        'top_k': top_k,
        'queries': []
    }

    # Generate dataset
    for query in tqdm(queries):

        products = search_engine.query(query, top_k=top_k)
        products = products.to_dict('records')

        products = [{'id': product['PRODUCT_ID'], 'title': product['TITLE'], 'description': product['DESCRIPTION']} for product in products]

        dataset['queries'].append({
            'query': query,
            'products': products,
            'attack_pos': random.randint(0, top_k-1)
        })

    with open(output_path, 'w') as f:
        json.dump(dataset, f, indent=3)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Script to generate the evaluation dataset for the bias attack')
    parser.add_argument('-q', '--queries-path', required=True, type=str, help='Path to a JSON-like file storing an array of queries. It can be generated by script `generate_queries.py`')
    parser.add_argument('-s', '--search-engine-path', required=True, type=str, help='Path to the directory of the search engine. It can be generated by script `create_index.py`')
    parser.add_argument('-o', '--output-path', required=True, type=str, help='Path where JSON-like file will be writen')
    parser.add_argument('-k', '--top-k', required=True, type=int, help='Number of products for each query')
    parser.add_argument('--seed', default=89578, type=int, help='Seed used to replicate the generated dataset')

    args = parser.parse_args()

    main(args)
